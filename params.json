{"name":"OpenStack4J","tagline":"A Fluent OpenStack Java API","body":"OpenStack for Java (OpenStack4j)\r\n================================\r\nOpenStack4j is a fluent OpenStack client which allows provisioning and control of an OpenStack system.   This include Identity, Compute and Neutron using Java.  \r\n\r\nAPI Highlights\r\n--------------\r\n\r\n* **Expected Results**\r\nAll API calls that return a single object will be null if no data is found.  Calls that return a List/Collection will\r\nreturn an empty list if not found.  \r\n\r\n* **Easy Exception Handling**\r\nExceptions will never be thrown for 404 (Not Found) See above for standards.  Based on the OpenStack specifications of errors all exceptions extends a common unchecked ResponseException.  Server and Client exceptions also have an enumerated type fully classifying the exact reason for failure.  Exceptions are broken up into 3 categories.\r\n * ServerResponseException - is thrown if error codes are between 500 and 600.  \r\n * ClientResponseException - is thrown if error codes are between 400 and 499 excluding 404\r\n * ResponseException - Base exception is for all other failures\r\n\r\n* **Fluent Interface**\r\nAll calls are fluent by nature. To shorten fluent calls an interface can be assigned during the chain to shorten the calls.  \r\n\r\n* **Concrete API**\r\nAll APIs are interface defined as well as corresponding models and builders.  No need to ever refer to the implementation. Implementations are always defined within an \"internal\" package.\r\n\r\nAPI Documentation\r\n-----------------\r\nhttp://www.openstack4j.com/javadoc/index.html\r\n\r\nMaven\r\n-----\r\n```\r\n<dependency>\r\n    <groupId>org.pacesys</groupId>\r\n    <artifactId>openstack4j</artifactId>\r\n    <version>1.0.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nAuthenticating\r\n--------------\r\nCreating and authenticating against OpenStack is extremely simple. Below is an example of authenticating which will\r\nresult with the authorized OSClient.  OSClient allows you to invoke Compute, Identity, Neutron operations fluently. \r\n\r\n```java\r\nOSClient os = OSFactory.builder()\r\n                       .endpoint(\"http://127.0.0.1:5000/v2.0\")\r\n                       .credentials(\"admin\",\"sample\")\r\n                       .tenantName(\"admin\")\r\n                       .authenticate();\r\n```\r\n\r\nIdentity Operations (Keystone)\r\n------------------------------\r\nAfter successful authentication you can invoke any Identity (Keystone) directly from the OSClient. \r\n\r\nIdentity Services fully cover Tenants, Users, Roles, Services, Endpoints and Identity Extension listings.  The examples below are only a small fraction of the existing API so please refer to the API documentation for more details.\r\n\r\n**Create a Tenant, User and associate a Role**\r\n```java\r\n// Create a Tenant (could also be created fluent within user create)\r\nTenant tenant = os.identity().tenants().create(Builders.tenant().name(\"MyNewTenant\").build());\r\n\r\n// Create a User associated to the new Tenant\r\nUser user = os.identity().users().create(Builders.user().name(\"jack\").password(\"sample\").tenant(tenant).build());\r\n\r\n// Add a Tenant based Role to the User\r\nos.identity().roles().addUserRole(tenant.getId(), user.getId(), os.identity().roles().getByName(\"Member\").getId());\r\n\r\n```\r\n\r\n**User Management**\r\n```java\r\n// Find all Users\r\nList<User> users = os.identity().users().list();\r\n\r\n// Find all Users for a Tenant\r\nList<User> users = os.identity().users().listTenantUsers(\"tenantId\");\r\n\r\n// List User Global Roles\r\nList<Role> roles = os.identity().users().listRoles(\"userId\");\r\n\r\n// List User roles on Tenant\r\nList<Role> roles = os.identity().users().listRolesOnTenant(\"userId\", \"tenantId\");\r\n\r\n// Change a User Password\r\nos.identity().users().changePassword(\"userId\", \"newPassword\");\r\n\r\n// Enable/Disable a user\r\nos.identity().users().enableUser(\"userId\", false); \r\n\r\n// Delete a User\r\nos.identity().users().delete(\"userId\");\r\n\r\n// Get a User By ID\r\nUser user = os.identity().users().get(\"userId\");\r\n```\r\n\r\n**Services and Endpoints**\r\n```java\r\n// Go direct to API to slim down method chaining\r\nServiceManagerService sm = os.identity().services();\r\n\r\n// List Services\r\nList<Service> services = sm.list();\r\n\r\n// List Endpoints\r\nList<ServiceEndpoint> ep = sm.listEndpoints();\r\n\r\n// Create a Service and Endpoint\r\nService service = sm.create(\"Name\", \"Type\", \"Description\");\r\nServiceEndpoint sep = sm.createEndpoint(\"region\", service.getId(), \"pubURL\", \"admURL\", \"intURL\");\r\n\r\n// Get a Service by ID\r\nService service = sm.get(\"serviceId\");\r\n\r\n// Delete a Service and Endpoint\r\nsm.delete(\"serviceId\");\r\nsm.deleteEndpoint(\"endpointId\");\r\n```\r\n\r\nCompute Operations (Nova)\r\n-------------------------\r\nOpenStack4j covers most the major common compute based operations.  With the simplistic API approach you can fully manage Servers, Flavors, Images, Quota-Sets, Diagnostics, Tenant Usage and more.  As the API evolves additional providers and extensions will be covered and documented within the API.\r\n\r\n**Create a Flavor and Boot a Server/VM**\r\n```java\r\n// Create a Flavor for a special customer base\r\nFlavor flavor = os.compute().flavors()\r\n                  .create(Builders.flavor().name(\"Gold\").vcpus(4).disk(80).ram(2048).build());\r\n                  \r\n// Create and Boot a new Server (minimal builder options shown in example)\r\nServer server = os.compute().servers()\r\n                  .boot(Builders.server().name(\"Ubuntu 2\").flavor(flavor.getId()).image(\"imageId\").build());\r\n\r\n```\r\n\r\n**Server Actions**\r\n\r\nSimple Actions are a single command giving the Server ID and desired Action.  The available simple actions\r\nare PAUSE, UNPAUSE, STOP, START, LOCK, UNLOCK, SUSPEND, RESUMT, RESCUE, UNRESCUE, SHELVE, SHELVE_OFFLOAD, UNSHELVE.\r\n\r\nExtended actions are handled via direct API calls.  \r\n```java\r\n\r\n/* Simple Actions */\r\n\r\n// Suspend a Server\r\nos.compute().servers().action(server.getId(), Action.SUSPEND);\r\n\r\n// Resume a Server\r\nos.compute().servers().action(server.getId(), Action.RESUME);\r\n\r\n/* Extended Actions */\r\n\r\n// Reboot\r\nos.compute().servers().reboot(server.getId(), RebootType.SOFT);\r\n\r\n// Resize\r\nos.compute().servers().resize(server.getId(), newFlavor.getId());\r\n\r\n// Confirm Resize\r\nos.compute().servers().confirmResize(server.getId());\r\n\r\n// Revert Resize\r\nos.compute().servers().revertResize(server.getId());\r\n\r\n```\r\n\r\n**Create a new Server Snapshot**\r\n```java\r\nString imageId = os.compute().servers().createSnapshot(server.getId(), \"Clean State Snapshot\");\r\n```\r\n\r\n**Server Diagnostics**\r\n\r\nDiagnostics are usage information about the server.  Usage includes CPU, Memory and IO.  Information is\r\ndependant on the hypervisor used by the OpenStack installation.  As of right now there is no concrete diagnostic\r\nspecification which is why the information is variable and in map form (key and value)\r\n```java\r\nMap<String, ? extends Number> diagnostics = os.compute().servers().diagnostics(\"serverId\");\r\n```\r\n\r\n**Server CRUD**\r\n```java\r\n// List all Servers\r\nList<Server> servers = os.compute().servers().list();\r\n\r\n// List all servers (light) ID, Name and Links populated\r\nList<Server> servers = os.compute().servers().list(false);\r\n\r\n// Get a specific Server by ID\r\nServer server = os.compute().servers().get(\"serverId\");\r\n\r\n// Delete a Server\r\nos.compute().servers().delete(\"serverId\");\r\n```\r\n\r\n**Quota-Sets, Limits and Simple Tenant Usage (os-simple-tenant-usage)**\r\n```java\r\n// Quota-Set for a specific Tenant\r\nQuotaSet qs = os.compute().quotaSets().get(tenant.getId());\r\n\r\n// Quota-Set for a specific Tenant and User\r\nQuotaSet qs = os.compute().quotaSets().get(tenant.getId(), user.getId());\r\n\r\n// Limits (Rate Limit and Absolute)\r\nLimits limits = os.compute().quotaSets().limits();\r\n\r\n// Tenant Usage for All Tenants\r\nList<? extends SimpleTenantUsage> tenantUsages = os.compute().quotaSets().listTenantUsages();\r\n\r\n// Tenant Usage (detailed) for specific Tenant\r\nSimpleTenantUsage usage = os.compute().quotaSets().getTenantUsage(\"tenantId\");\r\n```\r\n\r\n**Flavors**\r\n```java\r\n// List all Flavor(s)\r\nList<Flavor> flavors = os.compute().flavors().list();\r\n\r\n// Get a Flavor by ID\r\nFlavor f = os.compute().flavors().get(\"flavorId\");\r\n\r\n// Delete a Flavor\r\nos.compute().flavors().delete(flavor.getId());\r\n\r\n// Create a Flavor - By Params (name, ram, vcpus, disk, etc)\r\nFlavor f = os.compute().flavors().create(\"WebServer Template\", 1024, 2, 10, ...//);\r\n\r\n// By Builder\r\nFlavor f = os.compute().flavors().create(Builders.flavor().name(\"Ubuntu\").vcpus(2).disk(80).build());\r\n```\r\n\r\n**Images**\r\n```java\r\n// List all Images (detailed @see #list(boolean detailed) for brief)\r\nList<Image> images = os.compute().images().list();\r\n\r\n// Get an Image by ID\r\nImage img = os.compute().images().get(\"imageId\");\r\n\r\n// Delete an Image\r\nos.compute().images().delete(\"imageId\");\r\n\r\n// MetaData\r\n\r\n// Get\r\nMap<String, String> md = os.compute().images().getMetaData(\"imageId\");\r\n\r\n// Set\r\nMap<String, String> md = os.compute().images().setMetaData(\"imageId\", newMetaMap);\r\n\r\n// Delete Keys\r\nos.compute().images().deleteMetaData(\"imageId\", \"key1\", key2\", ...//);\r\n```\r\n\r\nNetworks (Neutron)\r\n------------------\r\n\r\n**Network Operations**\r\n```java\r\n// List the networks which the current authorized tenant has access to\r\nList<Network> networks = os.networking().network().list();\r\n\r\n// Network by ID\r\nNetwork network = os.networking().network().get(\"networkId\");\r\n\r\n// Delete a Network\r\nos.networking().network().delete(\"networkId\");\r\n\r\n// Create a Network\r\nNetwork network = os.networking().network()\r\n                    .create(Builders.network().name(\"MyNewNet\").tenantId(tenant.getId()).build());\r\n```\r\n\r\n**Subnet Operations**\r\n```java\r\n// List all subnets which the current authorized tenant has access to\r\nList<Subnet> subnets = os.networking().subnet().list();\r\n\r\n// Get a Subnet by ID\r\nSubnet subnet = os.networking().subnet().get(\"subnetId\");\r\n\r\n// Delete a Subnet\r\nos.networking().subnet().delete(\"subnetId\");\r\n\r\n// Create a Subnet\r\nSubnet subnet = os.networking().subnet().create(Builders.subnet()\r\n                  .name(\"MySubnet\")\r\n                  .networkId(\"networkId\")\r\n                  .tenantId(\"tenantId\")\r\n                  .addPool(\"192.168.0.1\", \"192.168.0.254\")\r\n                  .ipVersion(IPVersionType.V4)\r\n                  .cidr(\"192.168.0.0/24\")\r\n                  .build());\r\n```\r\n\r\n**Port Operations**\r\n```java\r\n// List all Ports which the current authorized tenant has access to\r\nList<Port> ports = os.networking().port().list();\r\n\r\n// Get a Port by ID\r\nPort port = os.networking().port().get(\"portId\");\r\n\r\n// Delete a Port\r\nos.networking().port().delete(\"portId\");\r\n\r\n// Create a Port\r\nPort port = os.networking().port().create(Builders.port()\r\n              .name(\"port1\").networkId(\"networkId\").fixedIp(\"52.51.1.253\", \"subnetId\").build());\r\n              \r\n// Update a Port\r\nPort updatedPort = os.networking().port().update(port);\r\n```\r\n\r\n**Router Operations**\r\n```java\r\n// List all Routers \r\nList<Router> = os.networking().router().list();\r\n\r\n// Get a Router by ID\r\nRouter router = os.networking().router().get(\"routerId\");\r\n\r\n// Delete a Router\r\nos.networking().router().delete(\"routerId\");\r\n\r\n// Create a Router\r\nRouter router = os.networking().router().create(Builders.router()\r\n                  .name(\"ext_net\").adminStateUp(true).externalGateway(\"networkId\").build());\r\n                  \r\n// Update a Router\r\nrouter = os.networking().router().update(router.toBuilder().name(\"ext_net2\").build());\r\n\r\n// Toggle Administrative State\r\nRouter router = os.networking().router().toggleAdminStateUp(\"routerId\", true);\r\n\r\n// Attach an External Interface\r\nRouterInterface iface = os.networking().router().attachInterface(\"routerId\", AttachInterfaceType.SUBNET, \"subnetId\");\r\n\r\n// Detach an External Insterface\r\nRouterInterface iface = os.networking().router().detachInterface(\"routerId\", \"subnetId\", null);\r\n```\r\n\r\nImage Operations (Glance)\r\n-------------------------\r\nDocumenation coming soon...\r\n\r\nContributing\r\n------------\r\nIf you would like to contribute to this project we welcome you. Please contact us and let us know your area of expertise. We are looking for engineers to extend API functionality as well as add extensions and extended providers.\r\n\r\nLicense\r\n-------\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Jeremy Unruh\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}